#separator:tab
#html:true
React Hooks 的设计目标是什么？	"<pre><code class=""language-javascript"">// 解决 Class 组件的痛点：
// 1. 逻辑复用困难（避免高阶组件嵌套地狱）
// 2. 生命周期分散（相关逻辑被拆分到不同生命周期）
// 3. 提升函数组件能力（使函数组件能拥有状态和副作用）

import { useState, useEffect } from 'react';

function Timer() {
  const [seconds, setSeconds] = useState(0); // 状态管理
  
  useEffect(() => { // 副作用聚合
    const id = setInterval(() => {
      setSeconds(s => s + 1);
    }, 1000);
    return () => clearInterval(id);
  }, []);
  
  return &lt;div&gt;Seconds: {seconds}&lt;/div&gt;;
}</code></pre>"
useEffect 依赖数组为空时的执行时机是什么？	"<pre><code class=""language-javascript"">useEffect(() => {
  // 仅在组件首次挂载时执行
  console.log('Mount effect');
  
  return () => {
    // 组件卸载时执行清理
    console.log('Unmount cleanup');
  };
}, []); // 空依赖数组

// 等效于 Class 组件的：
// componentDidMount() { ... }
// componentWillUnmount() { ... }</code></pre>"
如何避免子组件因回调函数重复渲染？	"<pre><code class=""language-javascript"">import { useCallback } from 'react';

function Parent() {
  const [count, setCount] = useState(0);
  
  // 缓存回调函数，count 变化时才更新
  const handleClick = useCallback(() => {
    setCount(c => c + 1);
  }, [count]); // ✅ 依赖项声明

  return &lt;Child onClick={handleClick} /&gt;;
}

// 子组件配合 React.memo 避免无效渲染
const Child = React.memo(({ onClick }) => (
  &lt;button onClick={onClick}&gt;Add&lt;/button&gt;
));</code></pre>"
useMemo 和 useCallback 的核心区别是什么？	"<pre><code class=""language-javascript"">// useMemo：缓存计算结果（值）
const memoizedValue = useMemo(() => {
  return computeExpensiveValue(a, b);
}, [a, b]); // ✅ 依赖项变化时重新计算

// useCallback：缓存函数引用（函数）
const memoizedCallback = useCallback(() => {
  doSomething(a, b);
}, [a, b]); // ✅ 依赖项变化时更新函数

// 本质区别：
// useMemo 返回计算结果，useCallback 返回函数本身
// 使用场景：
//   useMemo - 避免重复计算复杂值
//   useCallback - 避免子组件无效渲染</code></pre>"
useRef 的典型使用场景有哪些？	"<pre><code class=""language-javascript"">// 场景1：存储跨渲染数据（不触发重渲染）
function Timer() {
  const intervalRef = useRef(null); // 保存定时器ID
  
  useEffect(() => {
    intervalRef.current = setInterval(tick, 1000);
    return () => clearInterval(intervalRef.current);
  }, []);
  
  const stop = () => clearInterval(intervalRef.current);
}

// 场景2：访问 DOM 节点
function TextInput() {
  const inputRef = useRef();
  
  const focusInput = () => inputRef.current.focus();
  
  return (
    &lt;input ref={inputRef} /&gt;
    &lt;button onClick={focusInput}&gt;聚焦&lt;/button&gt;
  );
}</code></pre>"
函数组件中如何读取 Context 值？	"<pre><code class=""language-javascript"">import { useContext } from 'react';
import ThemeContext from './ThemeContext';

function ThemedButton() {
  // 直接获取最近的 Provider 值
  const theme = useContext(ThemeContext);
  
  return (
    &lt;button style={{ background: theme.background }}&gt;
      {theme.textColor}
    &lt;/button&gt;
  );
}

// 等效于 Class 组件的：
// static contextType = ThemeContext;
// const theme = this.context;</code></pre>"
自定义 Hook 的命名规范是什么？	"<pre><code class=""language-javascript"">// 规范：必须以 ""use"" 开头（React 的规则）
function useDocumentTitle(title) {
  useEffect(() => {
    document.title = title;
  }, [title]); // ✅ 依赖项声明
}

// 正确使用：
function MyComponent() {
  useDocumentTitle('首页'); // ✅ 符合命名规范
}

// 错误示例：
function getData() { // ❌ 不以 use 开头无法识别 Hook
  const [data] = useState(null);
}</code></pre>"
如何实现监听浏览器窗口大小的 Hook？	"<pre><code class=""language-javascript"">import { useState, useEffect } from 'react';

function useWindowSize() {
  const [size, setSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight
  });

  useEffect(() => {
    const handleResize = () => {
      setSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };
    
    window.addEventListener('resize', handleResize);
    
    // 返回清理函数移除监听
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []); // ✅ 空依赖数组确保只绑定一次

  return size;
}

// 使用示例：
function ResponsiveComponent() {
  const { width } = useWindowSize();
  return &lt;div&gt;当前宽度: {width}px&lt;/div&gt;;
}</code></pre>"
什么是""状态最小化""原则？	"<pre><code class=""language-javascript"">// 反模式：存储冗余状态
function UserInfo() {
  const [user, setUser] = useState(null);
  const [age, setAge] = useState(0); // ❌ 可从 user.birthDate 计算
  
  // 正确做法：最小化状态存储
  function OptimizedUser() {
    const [user] = useState({ birthDate: '1990-01-01' });
    
    // ✅ 通过计算得到年龄
    const age = new Date().getFullYear() - 
      new Date(user.birthDate).getFullYear();
    
    return &lt;div&gt;年龄: {age}&lt;/div&gt;;
  }
  
  // 另一个示例：URL 参数读取
  const params = new URLSearchParams(location.search);
  const id = params.get('id'); // ✅ 直接读取，无需复制到 state
}</code></pre>"
扩展点机制如何解决组件耦合问题？	"<pre><code class=""language-javascript"">// 1. 创建扩展点注册表
const extensionRegistry = {};

export function registerExtension(point, handler) {
  extensionRegistry[point] = handler;
}

// 2. 组件使用扩展点
function PaymentForm() {
  const onPay = () => {
    // ✅ 通过注册机制解耦
    const handler = extensionRegistry['before-pay'];
    if (handler) handler();
    
    processPayment();
  };
}

// 3. 其他模块注册扩展
registerExtension('before-pay', () => {
  console.log('执行支付前校验');
});

// ✅ 优势：避免组件间直接导入依赖
// ❌ 反例：直接导入会形成耦合
// import validation from './validator'; // 紧密耦合</code></pre>"
表单处理中受控组件 vs 非受控组件的区别？	"<pre><code class=""language-javascript"">// 受控组件：状态驱动视图
function ControlledForm() {
  const [value, setValue] = useState('');
  
  return (
    &lt;input 
      value={value} 
      onChange={e => setValue(e.target.value)} // ✅ 双向绑定
    /&gt;
  );
}

// 非受控组件：通过 ref 访问 DOM
function UncontrolledForm() {
  const inputRef = useRef();
  
  const handleSubmit = () => {
    console.log(inputRef.current.value); // ✅ 提交时获取值
  };
  
  return (
    &lt;form onSubmit={handleSubmit}&gt;
      &lt;input ref={inputRef} /&gt;
    &lt;/form&gt;
  );
}</code></pre>"
如何用 Hook 实现表单校验？	"<pre><code class=""language-javascript"">import { useState } from 'react';

function useForm(validators) {
  const [values, setValues] = useState({});
  const [errors, setErrors] = useState({});
  
  const validate = (name, value) => {
    // 执行字段校验规则
    const err = validators[name]?.(value) || '';
    setErrors(e => ({ ...e, [name]: err }));
    return !err;
  };
  
  const handleChange = (name, value) => {
    setValues(v => ({ ...v, [name]: value }));
    validate(name, value);
  };
  
  return { values, errors, handleChange, validate };
}

// 使用示例：
function LoginForm() {
  const validators = {
    username: v => !v ? '必填' : '',
    password: v => v.length < 6 ? '至少6位' : ''
  };
  
  const { values, errors, handleChange } = useForm(validators);
  
  return (
    &lt;&gt;
      &lt;input 
        onChange={e => handleChange('username', e.target.value)}
        aria-invalid={!!errors.username}
      /&gt;
      {errors.username && &lt;div&gt;{errors.username}&lt;/div&gt;}
    &lt;/&gt;
  );
}</code></pre>"
容器模式如何解决 Hooks 的条件执行问题？	"<pre><code class=""language-javascript"">// 错误：Hooks 不能条件执行
function ProblemComponent({ visible }) {
  if (!visible) return null; // ❌ 提前 return
  const [data] = useState(); // Hook 可能不会执行
}

// 解决方案：容器组件模式
function Container({ visible }) {
  if (!visible) return null; // ✅ 在容器层控制渲染
  return &lt;ChildWithHooks /&gt;;
}

function ChildWithHooks() {
  // ✅ 保证 Hook 始终执行
  const [data] = useState();
  useEffect(() => { ... });
  
  return &lt;div&gt;{data}&lt;/div&gt;;
}

// 替代方案：通过 CSS 隐藏
function CSSWorkaround() {
  const [data] = useState();
  return (
    &lt;div style={{ display: visible ? 'block' : 'none' }}&gt;
      {data}
    &lt;/div&gt;
  );
}</code></pre>"
Redux 在函数组件中的核心 API 是什么？	"<pre><code class=""language-javascript"">import { useSelector, useDispatch } from 'react-redux';

function UserProfile() {
  // ✅ 获取状态
  const user = useSelector(state => state.user);
  
  // ✅ 获取 dispatch 方法
  const dispatch = useDispatch();
  
  const handleUpdate = () => {
    // 触发 action
    dispatch({ type: 'UPDATE_USER', payload });
  };
  
  return (
    &lt;div&gt;
      &lt;span&gt;{user.name}&lt;/span&gt;
      &lt;button onClick={handleUpdate}&gt;更新&lt;/button&gt;
    &lt;/div&gt;
  );
}</code></pre>"
异步 Action 在 Redux 中的实现原理是什么？	"<pre><code class=""language-javascript"">// 配置 redux-thunk 中间件后
// action 可以是函数形式
const fetchUser = (userId) => (dispatch) => {
  dispatch({ type: 'FETCH_USER_REQUEST' });
  
  // ✅ 异步操作
  fetch(`/users/${userId}`)
    .then(res => res.json())
    .then(data => {
      dispatch({ type: 'FETCH_USER_SUCCESS', data });
    })
    .catch(error => {
      dispatch({ type: 'FETCH_USER_FAILURE', error });
    });
};

// 组件中触发异步 action
function UserContainer() {
  const dispatch = useDispatch();
  
  useEffect(() => {
    // ✅ 分发函数而非普通 action 对象
    dispatch(fetchUser(123));
  }, []);
}

// 中间件原理伪代码：
const thunkMiddleware = ({ dispatch }) => next => action => {
  if (typeof action === 'function') {
    return action(dispatch); // ✅ 执行异步函数
  }
  return next(action); // 普通 action
};</code></pre>"