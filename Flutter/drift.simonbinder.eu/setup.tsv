#separator:tab
#html:true
Drift中定义自增ID整型列(Dart)	"<pre><code class=""language-dart"">class Users extends Table {
  IntColumn get id => integer().autoIncrement()();
  // 其他列...
}</code></pre>"
Drift声明数据库类(Dart)	"<pre><code class=""language-dart"">@DriftDatabase(tables: [Users])
class AppDatabase extends _$AppDatabase {
  // 数据库配置...
}</code></pre>"
Drift文本列长度限制(Dart)	"<pre><code class=""language-dart"">TextColumn get username => 
  text().withLength(min: 6, max: 32)();</code></pre>"
执行Drift插入操作(Dart)	"<pre><code class=""language-dart"">await into(users).insert(UsersCompanion(
  name: Value('Alice'),
  age: Value(30)
));</code></pre>"
Flutter数据库存储位置(Dart)	"<pre><code class=""language-dart"">LazyDatabase(() async {
  final dbFolder = await getApplicationDocumentsDirectory();
  final file = File(p.join(dbFolder.path, 'db.sqlite'));
  return VmDatabase(file);
});</code></pre>"
Drift依赖配置(YAML)	"<pre><code class=""language-yaml"">dependencies:
  drift: ^2.0.0
  drift_flutter: ^2.0.0
  path_provider: ^2.0.0

dev_dependencies:
  drift_dev: ^2.0.0
  build_runner: ^2.0.0</code></pre>"
PostgreSQL连接依赖(YAML)	"<pre><code class=""language-yaml"">dependencies:
  drift_postgres: ^0.1.0
  postgres: ^2.0.0</code></pre>"
数据库版本控制(Dart)	"<pre><code class=""language-dart"">@override
int get schemaVersion => 2; // 每次更改递增</code></pre>"
运行Drift代码生成器(Bash)	"<pre><code class=""language-bash"">dart run build_runner build --delete-conflicting-outputs</code></pre>"
Drift类型安全查询示例(Dart)	"<pre><code class=""language-dart"">Future<List<User>> getAdults() {
  return (select(users)..where((u) => u.age >= 18)).get();
  // 编译时验证列名和类型
}</code></pre>"