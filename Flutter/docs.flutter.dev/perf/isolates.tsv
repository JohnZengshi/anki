Dart代码的基本执行单元？	隔离器（isolates），类似线程但内存独立。
隔离器之间的通信方式？	仅通过消息传递（Port对象），不共享内存。
默认Flutter应用的执行环境？	单一主隔离器（main isolate）。
使用隔离器的核心场景？	避免大型计算导致UI卡顿（jank）。
事件循环的工作机制？	按顺序处理事件队列中的任务。
60Hz设备的帧事件频率？	每秒添加60次"绘制帧"事件到队列。
UI卡顿的根本原因？	事件处理超时（超过16.6ms帧间隔）。
消息传递的数据处理？	可变对象深拷贝，不可变对象（如String）传引用。
短生命周期隔离器创建方法？	Isolate.run(回调函数)。
Isolate.run的返回值处理？	计算完成后自动关闭隔离器并返回值。
长生命周期隔离器组件？	ReceivePort + SendPort + Isolate API。
端口(Port)的类比对象？	类似Stream（SendPort是生产者，ReceivePort是消费者）。
Flutter 3.7的重要更新？	后台隔离器支持平台插件（如SharedPreferences）。
隔离器的内存限制？	全局变量在不同隔离器中是独立副本。
Web平台的隔离器支持？	不支持，但compute()方法可保持代码兼容。
Web平台compute的行为？	主线程运行（移动端新建线程）。
隔离器中禁止的操作？	1.访问rootBundle 2.调用dart:ui方法 3.UI相关任务。
后台插件通信限制？	可主动请求，不能接收非请求消息（如Firestore推送）。
JSON解析优化案例？	用Isolate.run在后台解析大JSON文件避免卡顿。
媒体处理典型场景？	图片压缩、音视频转码、滤镜应用。
长时通信隔离器别称？	后台工作器（background workers）。
消息传递的性能优化？	Isolate.exit直接转移所有权（不拷贝）。