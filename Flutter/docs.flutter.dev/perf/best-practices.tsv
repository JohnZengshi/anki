Flutter性能优化的核心原则是什么？	避免常见陷阱，遵循最佳实践。
性能分析的首选工具是什么？	DevTools中的Performance View。
控制build()成本的关键建议？	1.避免重复昂贵操作 2.拆分大组件 3.本地化setState调用。
为什么避免在build()中做昂贵操作？	build()可能被频繁调用（祖先组件重建时）。
如何处理大型UI组件？	按功能拆分，并根据变化范围封装成独立组件。
setState调用的最佳位置？	尽可能靠近实际需要变化的子树（避免高位调用）。
Flutter的重建优化机制？	遇到相同widget实例时停止遍历子树（使用==判断）。
提高重建效率的关键技巧？	尽可能使用const构造函数创建widget。
如何自动提示使用const构造函数？	启用flutter_lints包的推荐lint规则。
saveLayer()为什么昂贵？	分配离屏缓冲区，触发渲染目标切换（GPU中断）。
何时必须使用saveLayer()？	动态显示重叠的半透明图形（无法预计算时）。
如何检测saveLayer()调用？	DevTools时间线的PerformanceOverlayLayer.checkerboardOffscreenLayers。
减少saveLayer()的方法？	1.预计算静态效果 2.重构绘画逻辑避免重叠。
哪些组件会触发saveLayer()？	Chip（禁用时）和Text（有overflowShader时）。
透明度和裁剪的优化建议？	1.优先使用半透明颜色 2.用FadeInImage替代Opacity 3.慎用裁剪。
更快的圆角实现方式？	使用borderRadius属性而非裁剪矩形。
列表/网格的性能关键？	使用惰性构建（仅创建可见项）。
惰性构建的组件有哪些？	ListView.builder、GridView.builder等。
什么是内部传递（intrinsic pass）？	需要测量所有子项大小的额外布局传递（如统一网格尺寸）。
如何调试内部传递？	启用DevTools的"Track layouts"选项。
避免内部传递的方法？	1.固定单元格大小 2.设置锚点单元格 3.自定义RenderObject。
60Hz设备的帧时间预算？	总16ms（构建≤8ms + 渲染≤8ms）。
为什么低于16ms仍有优化必要？	1.延长电池寿命 2.减少发热 3.为120Hz设备准备（≤8ms/帧）。
AnimatedBuilder的优化技巧？	将静态子树移出builder函数（作为child参数传入）。
动画中应避免什么操作？	裁剪操作（应预先裁剪图像）。
列表构造的注意事项？	避免为不可见项创建组件（使用惰性构建器）。
为什么避免重写widget的==运算符？	可能导致O(N²)性能问题（破坏框架优化）。
==运算符的例外情况？	无子组件的叶子组件，且属性比较比重建更高效时。