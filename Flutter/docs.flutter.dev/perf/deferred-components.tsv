延迟组件的核心价值是什么？	减少初始安装包大小，按需下载Dart代码和资源。
当前支持的平台？	仅Android（利用动态功能模块）。
调试模式下的延迟组件行为？	视为普通导入，启动时立即加载（支持热重载）。
Android必备依赖？	Play Core库（com.google.android.play:core）。
必需的Android清单配置？	android:name="io.flutter.embedding.android.FlutterPlayStoreSplitApplication"。
Dart代码如何标记延迟加载？	使用deferred as关键字导入（如import 'box.dart' deferred as box）。
延迟组件的加载机制？	调用loadLibrary()返回Future，完成后使用组件。
加载状态处理最佳实践？	用FutureBuilder显示占位符（如CircularProgressIndicator）。
构建延迟组件的命令？	flutter build appbundle（自动验证配置）。
关键验证文件？	deferred_components_loading_units.yaml（记录加载单元）。
如何分配加载单元到组件？	在pubspec.yaml的deferred-components中配置name和libraries。
资源如何绑定到组件？	在deferred-components中添加assets子项。
延迟组件的安装方式？	Dart通过loadLibrary()，纯资源通过DeferredComponent服务类。
Android模块的声明位置？	android/settings.gradle添加模块名（如:boxComponent）。
本地测试工具？	使用bundletool（build-apks --local-testing）。
发布到商店的格式？	直接上传生成的.aab文件。
组件更新限制？	必须上传完整新应用包（不支持部分更新）。
延迟加载的典型场景？	非核心功能（如高级滤镜、游戏关卡）。
预加载技巧？	提前调用loadLibrary()隐藏加载时间。
加载单元ID的含义？	Dart内部标识（base默认为1，其他从2开始）。
资源重复问题？	同一资源在多个组件会导致重复安装。
验证失败处理？	根据工具建议修改配置后重新构建。