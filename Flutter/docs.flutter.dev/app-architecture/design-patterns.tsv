乐观状态(Optimistic State)核心目的？	提升用户体验感知，在后台操作完成前显示预期结果。
乐观状态适用场景？	用户交互后立即反馈（如按钮状态变化），减少等待感。
键值存储架构核心？	使用shared_preferences等存储简单数据（API密钥/用户偏好）。
键值存储适用场景？	应用配置、主题设置、简单用户数据等小数据量存储。
SQL存储架构特点？	处理复杂数据结构，支持关系型数据存储和查询。
SQL存储适用场景？	需要离线访问的结构化数据（如订单历史/用户收藏）。
离线优先核心策略？	1.本地缓存数据 2.后台同步 3.明确提示网络状态。
离线优先实现模式？	仓库层处理本地/远程数据同步，提供无缝体验。
命令模式核心组件？	Command类封装方法，管理执行状态（running/completed/error）。
命令模式优势？	1.简化视图模型逻辑 2.统一状态处理 3.避免重复代码。
Result对象作用？	封装异步操作结果，统一处理成功/错误状态。
Result对象优势？	1.强制错误处理 2.避免未捕获异常 3.明确状态转换。
MVVM中命令模式位置？	视图模型使用Command处理用户交互。
键值存储实现步骤？	1.数据层实现存储服务 2.仓库调用服务 3.ViewModel暴露接口。
SQL存储实现步骤？	1.定义数据库模型 2.创建DAO 3.仓库管理数据访问。
离线优先数据同步策略？	1.优先返回本地数据 2.后台更新远程 3.冲突解决机制。
乐观状态风险？	操作最终失败时需回滚UI状态并提供反馈。
Result对象典型状态？	Loading, Success, Error（或Idle/Running/Completed）。
命令模式状态反馈？	通过Command.running显示加载指示器。
键值存储性能考虑？	适合小数据量，大数据需用SQL或其他方案。
SQL加密方案？	使用sqflite_sqlcipher等支持加密的插件。
离线优先冲突处理？	时间戳/版本号机制，或用户介入解决。
Result对象扩展？	可添加额外元数据（如错误码/时间戳）。
命令模式与异步结合？	Command封装Future，自动管理异步状态。
设计模式选择原则？	根据功能需求选择，而非强制套用。