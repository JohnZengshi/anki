架构核心原则？	关注点分离（Separation of concerns）。
分层架构的典型层级？	1.UI层 2.逻辑层（可选） 3.数据层。
UI层的核心职责？	显示数据并处理用户交互（也称展示层）。
逻辑层的存在条件？	仅当应用有复杂业务逻辑时需要（CRUD应用可省略）。
数据层的核心功能？	管理数据源交互（数据库/API/插件）。
层间通信规则？	每层仅与相邻层通信（UI层不直接访问数据层）。
单一数据源(SSOT)原则？	每种数据类型只有一个权威来源（减少错误）。
SSOT的典型实现？	数据层中的Repository类（每数据类型一个）。
单向数据流(UDF)流程？	事件：UI→逻辑→数据 → 状态：数据→逻辑→UI。
UDF的核心价值？	解耦状态与UI，确保数据变更仅通过SSOT。
Flutter的声明式本质？	"UI是状态的函数" - UI反映当前应用状态。
状态驱动UI的关键？	数据应不可变持久化，视图保持最小逻辑。
可扩展性关键？	明确定义输入输出接口（允许实现替换）。
可测试性基础？	通过模拟依赖测试独立单元（如用Mock仓库测试ViewModel）。
逻辑层测试优势？	无需Flutter环境，可独立测试业务逻辑。
分层架构的维护价值？	添加新功能不影响其他层（如新增ViewModel不破坏数据层）。
UI层设计原则？	组件应可重用、精简（最小化逻辑）。
状态变更响应？	状态变化触发依赖UI重建。
数据层暴露方式？	通过方法向逻辑层提供数据和操作。
事件处理流程？	用户交互→UI事件处理→逻辑层方法→数据层变更。
新数据产生起点？	可从数据层开始（如HTTP轮询）→逻辑层→UI层。
不可变数据优势？	1.防止意外修改 2.提升可测试性 3.避免数据丢失。
接口清洁的价值？	支持实现替换而不影响消费者代码。
分层错误隔离？	逻辑层错误不影响数据层，UI错误不破坏业务逻辑。