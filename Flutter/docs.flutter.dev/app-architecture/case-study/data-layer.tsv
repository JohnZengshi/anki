数据层核心职责？	作为应用数据的唯一真实来源（唯一可修改数据的地方）。
数据层组成组件？	仓库(Repository)和服务(Service)。
服务的核心特点？	1.无状态 2.仅封装外部API 3.每个数据源一个服务类。
仓库的核心职责？	1.管理应用数据 2.处理缓存 3.实现重试逻辑 4.转换原始数据。
服务类定义原则？	一个服务类对应一个数据源（如HTTP服务器/平台插件）。
服务方法特点？	暴露异步响应对象（Future/Stream）。
仓库定义原则？	每个数据类型一个仓库（如UserRepository/BookingRepository）。
仓库与服务关系？	多对多（一个仓库可用多个服务，一个服务可被多仓库使用）。
领域模型定义？	应用程序需要的格式化数据（仓库输出格式）。
领域模型与API模型区别？	领域模型仅含应用需要数据，API模型含原始数据。
数据转换位置？	在仓库中将API模型转换为领域模型。
仓库方法示例？	createBooking(), getBooking(), delete()等。
服务注入方式？	通过构造函数注入到仓库（如BookingRepository(apiClient)）。
服务私有化原因？	防止UI层绕过仓库直接访问服务。
多环境支持方案？	通过抽象基类实现不同环境仓库（如BookingRepositoryRemote）。
Result工具类作用？	包装异步调用，简化错误处理和UI状态管理。
删除操作完整流程？	UI→ViewModel→Repository→Service→API。
仓库错误处理？	捕获异常并返回Result.error。
数据更新通知？	Repository操作完成后通知ViewModel更新状态。
API模型位置？	lib/data/model目录（原始数据结构）。
领域模型位置？	lib/domain/models目录（应用数据结构）。
仓库数据组合？	可调用多个服务方法组合数据（如预订+目的地+活动）。
缓存实现位置？	在仓库中实现（如_cachedDestinations）。
离线能力支持？	仓库负责数据同步（文档提及但未详述）。
重试逻辑位置？	在仓库中实现（文档提及但未详述）。
数据层唯一性原则？	应用数据变更只能通过数据层进行。