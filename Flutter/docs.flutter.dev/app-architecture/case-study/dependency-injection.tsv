依赖注入核心目的？	解耦组件依赖关系，提高可测试性和可维护性。
各层通信规则？	1.视图仅知ViewModel 2.ViewModel知仓库 3.仓库知服务 4.服务无依赖。
视图获取ViewModel方式？	通过构造函数注入（如HomeScreen(viewModel)）。
ViewModel获取仓库方式？	通过构造函数注入（如HomeViewModel(bookingRepository)）。
仓库获取服务方式？	通过构造函数注入（如BookingRepository(apiClient)）。
依赖注入实现库？	推荐使用package:provider。
服务注入位置？	在widget树顶层通过Provider创建。
仓库注入位置？	在widget树顶层通过Provider创建，依赖服务通过context.read()获取。
ViewModel注入位置？	在路由配置中创建，通过context.read()获取仓库。
私有成员重要性？	防止上层直接访问下层（如ViewModel中仓库设为私有）。
provider多类型支持？	使用MultiProvider组合多个Provider。
服务Provider示例？	Provider(create: (context) => ApiClient())。
仓库Provider示例？	Provider(create: (context) => BookingRepositoryRemote(apiClient: context.read()))。
ViewModel创建位置？	在路由builder中实例化（如go_router配置）。
context.read()作用？	从widget树获取已注册的依赖实例。
ChangeNotifierProvider用途？	用于需要状态通知的ViewModel。
依赖注入流程示例？	服务→仓库→ViewModel→视图。
AuthRepository注入示例？	ChangeNotifierProvider(create: (context) => AuthRepositoryRemote(...))。
路由配置注入特点？	在GoRouter的builder中创建ViewModel并注入仓库。
ViewModel私有成员示例？	final BookingRepository _bookingRepository（防止视图直接访问）。
可测试性体现？	通过注入mock依赖实现单元测试。
组件生命周期？	Provider创建的实例默认在整个widget树生命周期存在。
环境隔离实现？	通过不同Provider实现开发/生产环境切换。
替代方案？	可使用get_it、riverpod等其他DI库。