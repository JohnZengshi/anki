Flutter新手推荐的状态管理方案是什么？	provider包（简单易用，代码量少）。
provider的核心优势是什么？	简化状态共享，避免回调地狱，降低InheritedWidget使用门槛。
provider的三大核心概念是什么？	ChangeNotifier、ChangeNotifierProvider、Consumer。
ChangeNotifier的作用是什么？	提供状态变化通知机制（调用notifyListeners()触发更新）。
如何创建状态模型？	继承ChangeNotifier类，封装业务逻辑和数据。
状态变化时如何通知UI更新？	在模型方法中调用notifyListeners()。
ChangeNotifierProvider的作用是什么？	向组件树提供ChangeNotifier实例。
ChangeNotifierProvider的最佳放置位置？	状态使用者组件最近的共同祖先节点。
如何初始化多个状态？	使用MultiProvider包裹多个Provider。
Consumer组件的作用是什么？	监听状态变化并重建UI（当notifyListeners调用时）。
Consumer的builder参数包含哪三个参数？	context（上下文）、model（状态实例）、child（优化用子树）。
child参数的优化价值是什么？	避免重建静态子树（const SomeExpensiveWidget()）。
Consumer放置的最佳实践？	尽可能深地放在组件树中（避免大面积重建）。
何时使用Provider.of？	需要访问状态但不需要重建UI时（如按钮点击事件）。
Provider.of如何避免触发重建？	设置listen: false（Provider.of<CartModel>(context, listen: false)）。
状态提升（Lifting state up）的核心思想？	将状态放置在共同祖先组件（高于使用该状态的组件）。
为什么避免直接修改子组件？	违背声明式原则（应通过状态驱动重建）。
状态管理单元测试的关键？	直接测试模型类（不依赖UI，如测试CartModel逻辑）。
何时需要调用notifyListeners？	任何可能改变UI的状态更新后（如add/remove方法）。
购物车示例中的模型结构？	包含_items列表、totalPrice计算属性和add/removeAll方法。
provider包的添加命令？	flutter pub add provider。
Consumer泛型的作用？	指定要访问的状态类型（如Consumer<CartModel>）。
状态重建的性能保障？	只重建依赖该状态的Consumer组件。