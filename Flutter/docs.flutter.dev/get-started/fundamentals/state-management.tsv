#separator:tab
#html:true
如何用StatefulWidget实现计数器	"<pre><code class=""language-dart"">class Counter extends StatefulWidget {
  const Counter({super.key});

  @override
  State<Counter> createState() => _CounterState();
}

class _CounterState extends State<Counter> {
  int count = 0; // 状态变量

  void _increment() {
    setState(() { // 触发UI重建
      count++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text('$count'), // 显示状态
        ElevatedButton(
          onPressed: _increment, // 更新状态
          child: const Text('Add'),
        ),
      ],
    );
  }
}</code></pre>"
如何通过构造函数传递状态	"<pre><code class=""language-dart"">// 父组件管理状态
class Parent extends StatelessWidget {
  final int count;
  final VoidCallback onIncrement;

  const Parent({
    super.key,
    required this.count,
    required this.onIncrement,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        ChildWidget(count: count), // 通过构造函数传递状态
        ElevatedButton(
          onPressed: onIncrement,
          child: const Text('Add'),
        ),
      ],
    );
  }
}

// 子组件接收状态
class ChildWidget extends StatelessWidget {
  final int count;

  const ChildWidget({
    super.key,
    required this.count,
  });

  @override
  Widget build(BuildContext context) {
    return Text('Count: $count');
  }
}</code></pre>"
如何实现自定义InheritedWidget	"<pre><code class=""language-dart"">class AppState extends InheritedWidget {
  final int count;
  
  const AppState({
    super.key,
    required this.count,
    required super.child,
  });
  
  static AppState of(BuildContext context) {
    // 获取最近的AppState实例
    final result = context.dependOnInheritedWidgetOfExactType<AppState>();
    assert(result != null, 'No AppState found in context');
    return result!;
  }
  
  @override
  bool updateShouldNotify(AppState oldWidget) {
    return count != oldWidget.count; // 决定是否通知依赖项
  }
}

// 使用示例
class ConsumerWidget extends StatelessWidget {
  const ConsumerWidget({super.key});
  
  @override
  Widget build(BuildContext context) {
    // 获取共享状态
    final count = AppState.of(context).count;
    return Text('Count: $count');
  }
}</code></pre>"
如何用ChangeNotifier管理状态	"<pre><code class=""language-dart"">class CounterNotifier extends ChangeNotifier {
  int _count = 0;
  int get count => _count;
  
  void increment() {
    _count++;
    notifyListeners(); // 通知监听者
  }
}

// 使用ListenableBuilder
ListenableBuilder(
  listenable: counter, // CounterNotifier实例
  builder: (context, child) {
    return Column(
      children: [
        Text('${counter.count}'),
        ElevatedButton(
          onPressed: counter.increment,
          child: const Text('Add'),
        ),
      ],
    );
  },
)</code></pre>"
如何实现ValueNotifier状态管理	"<pre><code class=""language-dart"">// 创建可监听值
final counter = ValueNotifier<int>(0);

// 使用ValueListenableBuilder
ValueListenableBuilder<int>(
  valueListenable: counter,
  builder: (context, value, child) {
    return Column(
      children: [
        Text('$value'),
        ElevatedButton(
          onPressed: () => counter.value++, // 更新值
          child: const Text('Add'),
        ),
      ],
    );
  },
)</code></pre>"
MVVM模式在Flutter中的实现	"<pre><code class=""language-dart"">// Model (数据模型)
class User {
  final String name;
  final int age;
  
  User(this.name, this.age);
}

// ViewModel (使用ChangeNotifier)
class UserViewModel extends ChangeNotifier {
  User? _user;
  
  User? get user => _user;
  
  void loadUser() {
    // 模拟数据加载
    _user = User(""Alice"", 30);
    notifyListeners();
  }
}

// View
class UserView extends StatelessWidget {
  const UserView({super.key});
  
  @override
  Widget build(BuildContext context) {
    final viewModel = context.watch<UserViewModel>();
    
    return Column(
      children: [
        if (viewModel.user != null)
          Text('${viewModel.user!.name}, ${viewModel.user!.age}'),
        ElevatedButton(
          onPressed: viewModel.loadUser,
          child: const Text('Load'),
        ),
      ],
    );
  }
}</code></pre>"
状态管理的五大核心原则	"<pre><code class=""language-markdown"">1. **最小化状态原则**
   - 只存储必要状态，避免冗余数据
   - 示例：存储出生年份而非年龄

2. **单一数据源原则**
   - 每个状态片段只有一个权威来源
   - 避免状态副本冲突

3. **不可变数据原则**
   - 使用不可变数据结构
   - 简化变更检测和调试

4. **关注点分离原则**
   - UI组件只负责展示
   - 业务逻辑放在独立类中

5. **选择性重建原则**
   - 只重建依赖变更状态的部件
   - 使用const构造函数优化性能</code></pre>"
如何选择合适的状态管理方案	"<pre><code class=""language-dart"">// 决策树示例
Widget build(BuildContext context) {
  final scope = ProviderScope.of(context);
  
  if (scope.isLocalWidgetState) {
    // 局部状态：使用StatefulWidget
    return _buildStatefulWidget();
  } else if (scope.isSharedState) {
    if (scope.needsReactiveUpdates) {
      // 需要响应式更新：使用Provider/Riverpod
      return _buildProviderSolution();
    } else {
      // 简单共享：使用InheritedWidget
      return _buildInheritedWidget();
    }
  } else if (scope.isComplexState) {
    // 复杂状态逻辑：使用Bloc或Riverpod
    return _buildBlocSolution();
  }
  
  // 默认方案
  return _buildDefaultSolution();
}

/* 使用建议：
1. 计数器/简单UI状态 → StatefulWidget
2. 主题/用户凭证 → InheritedWidget
3. 表单/实时数据 → ChangeNotifier
4. 复杂业务逻辑 → BLoC/Riverpod */
</code></pre>"