#separator:tab
#html:true
JavaScript中如何创建并操作Set集合？	"<pre><code class=""language-javascript"">// 创建Set
const letters = new Set();

// 添加元素（自动去重）
letters.add('a').add('b').add('a'); 

// 检查存在性
console.log(letters.has('b')); // true

// 删除元素
letters.delete('a');

// 遍历Set
letters.forEach(value => console.log(value)); // b

// 清空集合
letters.clear();</code></pre>"
JavaScript中如何使用Set实现数组去重？	"<pre><code class=""language-javascript"">const duplicateNums = [3, 5, 2, 2, 5, 5];

// 数组去重
const uniqueNums = [...new Set(duplicateNums)];

console.log(uniqueNums); // [3, 5, 2]

// 字符串去重
const dupString = ""programming"";
const uniqueChars = [...new Set(dupString)].join("""");

console.log(uniqueChars); // ""progamin""</code></pre>"
JavaScript中如何用Set进行集合运算？	"<pre><code class=""language-javascript"">const setA = new Set([1, 2, 3]);
const setB = new Set([3, 4, 5]);

// 并集
const union = new Set([...setA, ...setB]);
console.log([...union]); // [1,2,3,4,5]

// 交集
const intersection = new Set(
  [...setA].filter(x => setB.has(x))
);
console.log([...intersection]); // [3]

// 差集 (A-B)
const difference = new Set(
  [...setA].filter(x => !setB.has(x))
);
console.log([...difference]); // [1,2]</code></pre>"
JavaScript中如何创建并操作Map字典？	"<pre><code class=""language-javascript"">// 创建Map
const userData = new Map();

// 添加键值对（支持链式调用）
userData.set('name', 'Alice')
        .set('age', 30)
        .set({ id: 1 }, 'Admin');

// 获取值
console.log(userData.get('name')); // 'Alice'

// 检查键是否存在
console.log(userData.has('age')); // true

// 遍历Map
for (let [key, value] of userData) {
  console.log(`${key}: ${value}`);
}

// 删除键值对
userData.delete('age');</code></pre>"
JavaScript中Map与Object的主要区别是什么？	"<pre><code class=""language-javascript"">// 1. 键的类型
const map = new Map();
map.set(1, 'number');       // 数字键
map.set(true, 'boolean');   // 布尔键

// 2. 顺序保证
map.set('first', 1).set('second', 2);
console.log([...map.keys()]); // [1, true, ""first"", ""second""]

// 3. 大小获取
console.log(map.size); // 4

// 4. 直接迭代
for (let [key, value] of map) {
  console.log(key, value);
}</code></pre>"
JavaScript中WeakSet的特点是什么？	"<pre><code class=""language-javascript"">// 创建WeakSet（只能包含对象）
const ws = new WeakSet();

let obj1 = { id: 1 };
let obj2 = { id: 2 };

// 添加对象引用
ws.add(obj1).add(obj2);

// 检查对象存在性
console.log(ws.has(obj1)); // true

// 删除引用
ws.delete(obj1);

// 垃圾回收演示
obj2 = null; // 当obj2被GC回收后，ws中自动移除</code></pre>"
JavaScript中WeakMap的应用场景是什么？	"<pre><code class=""language-javascript"">// 创建WeakMap（键必须是对象）
const wm = new WeakMap();

// 关联DOM元素与数据
const button = document.querySelector('button');
wm.set(button, { clicks: 0 });

// 事件处理
button.addEventListener('click', () => {
  const data = wm.get(button);
  data.clicks++;
  console.log(`Clicked ${data.clicks} times`);
});

// 当DOM元素被移除时，关联数据自动回收</code></pre>"
Set与Map的核心区别是什么？	"<pre><code class=""language-javascript"">// Set: 存储唯一值
const set = new Set();
set.add('value'); // [值, 值]存储

// Map: 存储键值对
const map = new Map();
map.set('key', 'value'); // [键, 值]存储

// 主要区别：
// 1. Set只有值，Map有键值对
// 2. Set自动去重，Map允许重复值（键不同）
// 3. Set用add()添加，Map用set()添加</code></pre>"
WeakSet与普通Set的关键区别？	"<pre><code class=""language-javascript"">// 普通Set
const set = new Set();
set.add('string'); // 可包含原始值
console.log(set.size); // 1

// WeakSet
const ws = new WeakSet();

// 只能包含对象
ws.add({}); 
// ws.add('text'); // 报错

// 无size属性/不可遍历
// console.log(ws.size); // undefined
// for(let item of ws){} // 报错

// 弱引用特性
let obj = {};
ws.add(obj);
obj = null; // 对象可被GC回收</code></pre>"
WeakMap与普通Map的关键区别？	"<pre><code class=""language-javascript"">// 普通Map
const map = new Map();
map.set('key', 'value'); // 任意键类型
console.log(map.size); // 1

// WeakMap
const wm = new WeakMap();
const keyObj = {};

// 键必须是对象
wm.set(keyObj, 'data');
// wm.set('string', 1); // 报错

// 无size/clear()/遍历方法
// wm.clear(); // 方法不存在

// 弱引用特性
wm.set(keyObj, 'privateData');
keyObj = null; // 键被回收时值自动释放</code></pre>"