#separator:tab
#html:true
如何创建一个基本的CSS Grid容器并设置3列2行的网格布局？	"<pre><code class=""language-css"">.container {
  display: grid;
  grid-template-columns: 200px 200px 200px;
  grid-template-rows: 100px 100px;
  grid-gap: 10px;
}</code></pre>"
使用repeat()函数简化CSS Grid的列和行定义	"<pre><code class=""language-css"">.grid-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(3, 150px);
  
  /* 混合使用 */
  grid-template-columns: 200px repeat(2, 1fr) 100px;
}</code></pre>"
如何使用fr单位创建响应式的Grid布局？	"<pre><code class=""language-css"">.responsive-grid {
  display: grid;
  grid-template-columns: 200px 1fr 2fr; /* 固定+比例 */
  grid-template-columns: repeat(3, 1fr); /* 等分 */
  grid-template-columns: 100px 2fr auto 1fr; /* 混合单位 */
}</code></pre>"
使用minmax()函数设置Grid列的最小和最大宽度	"<pre><code class=""language-css"">.flexible-grid {
  display: grid;
  grid-template-columns: minmax(100px, 1fr) minmax(200px, 2fr);
  
  /* 自适应列数 */
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  
  /* 自动填充 */
  grid-template-columns: repeat(auto-fill, minmax(200px, 300px));
}</code></pre>"
如何使用grid-template-areas定义命名网格区域？	"<pre><code class=""language-css"">.layout-grid {
  display: grid;
  grid-template-columns: 200px 1fr 200px;
  grid-template-rows: 80px 1fr 60px;
  grid-template-areas: 
    ""header header header""
    ""sidebar main aside""
    ""footer footer footer"";
}

.header { grid-area: header; }
.sidebar { grid-area: sidebar; }
.main { grid-area: main; }
.aside { grid-area: aside; }
.footer { grid-area: footer; }</code></pre>"
实现Grid项目的对齐控制（justify-items和align-items）	"<pre><code class=""language-css"">.aligned-grid {
  display: grid;
  grid-template-columns: repeat(3, 200px);
  
  justify-items: center; /* 水平对齐 */
  align-items: center; /* 垂直对齐 */
  place-items: center center; /* 简写 */
}

.grid-item {
  justify-self: end; /* 单独水平对齐 */
  align-self: start; /* 单独垂直对齐 */
}</code></pre>"
如何控制Grid容器整体在父容器中的对齐？	"<pre><code class=""language-css"">.container {
  display: grid;
  grid-template-columns: repeat(3, 200px);
  height: 500px;
  
  justify-content: center; /* 水平对齐整个网格 */
  align-content: center; /* 垂直对齐整个网格 */
  place-content: center center; /* 简写 */
}</code></pre>"
使用grid-auto-flow控制Grid项目的排列方向	"<pre><code class=""language-css"">.flow-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  
  grid-auto-flow: row; /* 先填满行 */
  grid-auto-flow: column; /* 先填满列 */
  grid-auto-flow: row dense; /* 密集填充 */
}</code></pre>"
实现一个完整的响应式Grid布局页面结构	"<pre><code class=""language-css"">.page-layout {
  display: grid;
  min-height: 100vh;
  grid-template-columns: 1fr;
  grid-template-areas:
    ""header"" ""nav"" ""main"" ""aside"" ""footer"";
}

@media (min-width: 768px) {
  .page-layout {
    grid-template-columns: 200px 1fr;
    grid-template-areas:
      ""header header"" ""nav main"" ""nav aside"" ""footer footer"";
  }
}

@media (min-width: 1024px) {
  .page-layout {
    grid-template-columns: 200px 1fr 250px;
    grid-template-areas:
      ""header header header"" ""nav main aside"" ""footer footer footer"";
  }
}</code></pre>"
CSS Grid与Flexbox的主要区别是什么？	"<pre><code class=""language-javascript"">// Grid vs Flexbox
const comparison = {
  dimensions: {
    grid: '二维布局 - 同时控制行和列',
    flexbox: '一维布局 - 主要控制一个方向'
  },
  useCases: {
    grid: ['整体页面布局', '复杂二维排列', '精确控制行列'],
    flexbox: ['组件内部布局', '一维排列', '内容大小未知']
  },
  control: {
    grid: '从容器角度定义布局结构',
    flexbox: '从内容角度调整排列方式'
  }
};</code></pre>"
Grid布局中auto-fill和auto-fit的区别	"<pre><code class=""language-css"">/* auto-fill：创建尽可能多的轨道，即使为空 */
.auto-fill-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  /* 效果：[item1][item2][empty][empty]... */
}

/* auto-fit：只创建需要的轨道，空轨道会被移除 */
.auto-fit-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  /* 效果：[item1 stretched][item2 stretched] */
}</code></pre>"
如何使用Grid实现瀑布流布局？	"<pre><code class=""language-css"">.masonry-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  grid-auto-rows: 10px; /* 小行高，让内容跨越多行 */
  grid-gap: 15px;
}

.masonry-item {
  /* 使用JS动态计算跨越行数 */
  /* grid-row-end: span var(--row-span); */
}

/* JS计算示例：
const height = item.getBoundingClientRect().height;
const rowSpan = Math.ceil(height / 10);
item.style.gridRowEnd = `span ${rowSpan}`;
*/</code></pre>"