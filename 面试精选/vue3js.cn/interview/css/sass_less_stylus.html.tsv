#separator:tab
#html:true
CSS预处理器的核心作用是什么？请用代码说明变量的使用	"<pre><code class=""language-scss"">// 变量定义和使用
$primary-color: #3498db;
$font-size-base: 16px;

.button {
  background-color: $primary-color;
  font-size: $font-size-base;
  
  &:hover {
    background-color: darken($primary-color, 10%);
  }
}</code></pre>"
Sass、Less、Stylus三种预处理器的变量声明语法有什么区别？	"<pre><code class=""language-scss"">// Sass/SCSS - 使用$符号
$primary-color: #ff6b6b;
$font-size: 14px;

// Less - 使用@符号
@primary-color: #ff6b6b;
@font-size: 14px;

// Stylus - 无符号限定
primary-color = #ff6b6b
font-size = 14px</code></pre>"
请实现一个CSS预处理器的混入(Mixin)功能，展示参数传递和默认值	"<pre><code class=""language-scss"">// Mixin定义
@mixin button-style($bg-color: #007bff, $text-color: white, $padding: 10px 20px) {
  background-color: $bg-color;
  color: $text-color;
  padding: $padding;
  border: none;
  border-radius: 4px;
  
  &:hover {
    background-color: darken($bg-color, 10%);
  }
}

// 使用Mixin
.primary-btn {
  @include button-style(#007bff);
}

.danger-btn {
  @include button-style(#dc3545, white, 12px 24px);
}</code></pre>"
CSS预处理器中的嵌套语法如何使用？请展示复杂的嵌套结构	"<pre><code class=""language-scss"">// 嵌套结构
.navigation {
  background-color: #333;
  
  .nav-list {
    list-style: none;
    display: flex;
    
    .nav-item {
      .nav-link {
        padding: 15px 20px;
        color: white;
        text-decoration: none;
        
        &:hover {
          background-color: #555;
        }
        
        &.active {
          background-color: #007bff;
        }
      }
      
      .dropdown {
        position: absolute;
        background-color: #444;
        opacity: 0;
        
        .dropdown-item {
          padding: 10px 15px;
        }
      }
      
      &:hover .dropdown {
        opacity: 1;
      }
    }
  }
}</code></pre>"
如何在CSS预处理器中实现函数功能？请展示颜色处理和数学计算	"<pre><code class=""language-scss"">// 函数定义
@function calculate-rem($px-value, $base-font-size: 16px) {
  @return #{$px-value / $base-font-size}rem;
}

@function create-shadow($depth: 1) {
  $shadow-values: ();
  
  @for $i from 1 through $depth {
    $blur: $i * 2px;
    $offset: $i * 1px;
    $opacity: 0.15 - ($i * 0.02);
    $shadow: 0 $offset $blur rgba(0, 0, 0, $opacity);
    $shadow-values: append($shadow-values, $shadow, comma);
  }
  
  @return $shadow-values;
}

// 使用函数
.card {
  font-size: calculate-rem(18px);
  background: lighten(#333, 20%);
  box-shadow: create-shadow(3);
}</code></pre>"
CSS预处理器中的条件控制和循环如何实现？请展示实际应用场景	"<pre><code class=""language-scss"">// 条件控制
@mixin respond-to($breakpoint) {
  @if $breakpoint == mobile {
    @media (max-width: 767px) { @content; }
  }
  @else if $breakpoint == tablet {
    @media (min-width: 768px) and (max-width: 1023px) { @content; }
  }
  @else if $breakpoint == desktop {
    @media (min-width: 1024px) { @content; }
  }
}

// 循环生成工具类
$spacing-values: (0, 5, 10, 15, 20);

@each $value in $spacing-values {
  .m-#{$value} {
    margin: #{$value}px;
  }
  .p-#{$value} {
    padding: #{$value}px;
  }
}

// 生成栅格系统
@for $i from 1 through 12 {
  .col-#{$i} {
    width: percentage($i / 12);
  }
}</code></pre>"
Less预处理器的特色功能有哪些？请展示Less特有的语法特性	"<pre><code class=""language-less"">// Less特色功能

// 1. 变量插值
@prefix: ui;
@property: color;

.@{prefix}-button {
  @{property}: red;
}

// 2. 混入守卫
.border-radius(@radius) when (@radius &gt; 0) {
  border-radius: @radius;
}

.box-shadow(@style, @color) when (iscolor(@color)) {
  box-shadow: @style @color;
}

// 3. 模式匹配
.triangle(up, @width: 10px, @color: #000) {
  border-left: @width solid transparent;
  border-right: @width solid transparent;
  border-bottom: @width solid @color;
}

.triangle(down, @width: 10px, @color: #000) {
  border-top: @width solid @color;
}

// 使用示例
.card {
  .border-radius(8px);
  .box-shadow(0 2px 4px, #000);
}</code></pre>"
Stylus预处理器的灵活语法如何体现？请展示多种书写风格	"<pre><code class=""language-stylus"">// Stylus灵活语法

// 省略大括号和分号
base-font-size = 16px
primary-color = #3498db

// 函数定义
rem-calc(px-value)
  (px-value / base-font-size) * 1rem

// 混入定义
border-radius(radius = 4px)
  border-radius radius

// 多种语法风格
.button
  padding rem-calc(12px) rem-calc(24px)
  background-color primary-color
  color white
  border none
  border-radius(6px)
  
  // CSS风格写法
  &:hover {
    background-color: darken(primary-color, 10%);
  }
  
  // 省略冒号的写法
  &:active
    transform translateY(0)

// 循环生成类
for i in 1..5
  .opacity-{i * 20}
    opacity (i * 20) / 100</code></pre>"
CSS预处理器中的继承(@extend)如何使用？请展示最佳实践	"<pre><code class=""language-scss"">// 基础样式定义
%button-base {
  display: inline-block;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;
}

%message-base {
  padding: 15px;
  margin-bottom: 20px;
  border: 1px solid transparent;
  border-radius: 4px;
}

// 继承并扩展
.btn-primary {
  @extend %button-base;
  background-color: #007bff;
  color: white;
}

.btn-secondary {
  @extend %button-base;
  background-color: #6c757d;
  color: white;
}

.alert-success {
  @extend %message-base;
  background-color: #d4edda;
  color: #155724;
}

// 链式继承
.btn-large {
  @extend .btn-primary;
  padding: 15px 30px;
  font-size: 18px;
}</code></pre>"
如何在现代前端项目中配置CSS预处理器？请展示Webpack配置示例	"<pre><code class=""language-javascript"">// webpack.config.js
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = {
  module: {
    rules: [
      // Sass/SCSS配置
      {
        test: /\.(sass|scss)$/,
        use: [
          MiniCssExtractPlugin.loader,
          'css-loader',
          'postcss-loader',
          {
            loader: 'sass-loader',
            options: {
              sassOptions: {
                includePaths: ['src/styles']
              }
            }
          }
        ]
      },
      
      // Less配置
      {
        test: /\.less$/,
        use: [
          'style-loader',
          'css-loader',
          {
            loader: 'less-loader',
            options: {
              lessOptions: {
                modifyVars: {
                  'primary-color': '#1890ff'
                }
              }
            }
          }
        ]
      },
      
      // Stylus配置
      {
        test: /\.styl$/,
        use: [
          'style-loader',
          'css-loader',
          'stylus-loader'
        ]
      }
    ]
  },
  
  plugins: [
    new MiniCssExtractPlugin({
      filename: '[name].[contenthash].css'
    })
  ]
};</code></pre>"