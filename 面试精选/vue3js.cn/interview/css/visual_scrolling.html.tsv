#separator:tab
#html:true
CSS视差滚动：什么是视差滚动效果？	"<pre><code class=""language-javascript"">// 视差滚动：多层背景以不同速度移动，形成立体运动效果

function parallaxScrollDemo() {
  const layers = {
    background: { speed: 0.2 },
    content: { speed: 1.0 },
    floating: { speed: 1.5 }
  };
  
  window.addEventListener('scroll', () => {
    const scrollY = window.scrollY;
    
    Object.keys(layers).forEach(layer => {
      const element = document.querySelector(`.${layer}`);
      const speed = layers[layer].speed;
      element.style.transform = `translateY(${scrollY * speed}px)`;
    });
  });
}</code></pre>"
CSS视差滚动：使用background-attachment实现视差效果	"<pre><code class=""language-css"">/* background-attachment 方式实现视差滚动 */

section {
  height: 100vh;
}

.parallax-bg {
  background-image: url('background.jpg');
  background-attachment: fixed;      /* 关键：固定背景 */
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
}

.content-layer {
  background: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 50px;
  text-align: center;
}

.parallax-1 {
  background-image: url('image1.jpg');
  background-attachment: fixed;
}

.parallax-2 {
  background-image: url('image2.jpg');
  background-attachment: fixed;
}</code></pre>"
CSS视差滚动：background-attachment属性值详解	"<pre><code class=""language-javascript"">// background-attachment 属性值说明

const backgroundAttachmentValues = {
  scroll: {
    description: '背景图像会随着页面其余部分的滚动而移动',
    usage: 'background-attachment: scroll;',
    effect: '正常滚动行为'
  },
  
  fixed: {
    description: '背景图像不会随页面滚动而移动',
    usage: 'background-attachment: fixed;',
    effect: '实现视差滚动效果的关键'
  },
  
  inherit: {
    description: '继承父元素background-attachment属性的值',
    usage: 'background-attachment: inherit;',
    effect: '跟随父元素设置'
  }
};

function toggleBackgroundAttachment(element, value) {
  element.style.backgroundAttachment = value;
  console.log(`背景附着方式已切换为: ${value}`);
}</code></pre>"
CSS视差滚动：使用transform3D实现视差效果	"<pre><code class=""language-css"">/* transform3D 方式实现视差滚动 */

html {
  overflow: hidden;
  height: 100%;
}

body {
  perspective: 1px;              /* 定义观察距离 */
  transform-style: preserve-3d;  /* 保持3D变换样式 */
  height: 100%;
  overflow-y: scroll;
  overflow-x: hidden;
}

.parallax-container {
  width: 100vw;
  height: 200vh;
  background: skyblue;
}

.layer-front {
  width: 500px;
  height: 200px;
  background: #409eff;
  transform: translateZ(0px);    /* 前景层 */
  margin-bottom: 50px;
}

.layer-middle {
  width: 500px;
  height: 200px;
  background: #67c23a;
  transform: translateZ(-1px);   /* 中景层 */
  margin-bottom: 150px;
}

.layer-back {
  width: 500px;
  height: 200px;
  background: #e6a23c;
  transform: translateZ(-2px);   /* 背景层 */
  margin-bottom: 150px;
}</code></pre>"
CSS视差滚动：3D变换核心概念解析	"<pre><code class=""language-javascript"">// CSS 3D变换核心概念详解

const css3DTransformConcepts = {
  transform: {
    description: 'CSS3属性，可对元素进行2D/3D变换',
    operations: {
      translate: 'translateX(), translateY(), translateZ() - 平移',
      rotate: 'rotateX(), rotateY(), rotateZ() - 旋转',
      scale: 'scaleX(), scaleY(), scaleZ() - 缩放',
      skew: 'skewX(), skewY() - 倾斜'
    }
  },
  
  perspective: {
    description: '定义3D变换时的空间感和立体效果',
    usage: 'perspective: 1px;',
    effect: '值越小，3D效果越明显'
  },
  
  transformStyle: {
    description: '指定子元素如何在3D空间中呈现',
    values: {
      flat: '子元素在2D平面中呈现',
      preserve3d: '子元素在3D空间中呈现（视差滚动必需）'
    }
  }
};

function parallax3DPrinciple() {
  const elements = [
    { z: 0, speed: 1.0 },
    { z: -1, speed: 0.5 },
    { z: -2, speed: 0.25 }
  ];
  
  console.log('3D视差原理：Z轴距离越远，滚动速度越慢');
}</code></pre>"
CSS视差滚动：完整的视差滚动页面实现	"<pre><code class=""language-html"">&lt;!DOCTYPE html&gt;
&lt;html lang=""zh-CN""&gt;
&lt;head&gt;
  &lt;meta charset=""UTF-8""&gt;
  &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1.0""&gt;
  &lt;title&gt;视差滚动效果&lt;/title&gt;
  &lt;style&gt;
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    .parallax-section {
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
    }
    
    .bg-parallax {
      background-attachment: fixed;
      background-size: cover;
      background-position: center;
    }
    
    .content {
      background: rgba(0, 0, 0, 0.6);
      color: white;
      padding: 2rem;
      border-radius: 10px;
      text-align: center;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;section class=""parallax-section bg-parallax"" 
           style=""background-image: url('mountain.jpg');""&gt;
    &lt;div class=""content""&gt;
      &lt;h1&gt;视差滚动效果&lt;/h1&gt;
      &lt;p&gt;背景图片固定，内容正常滚动&lt;/p&gt;
    &lt;/div&gt;
  &lt;/section&gt;
  
  &lt;section style=""height: 100vh; background: #f0f0f0; padding: 2rem;""&gt;
    &lt;h2&gt;普通内容区域&lt;/h2&gt;
    &lt;p&gt;这里是正常滚动的内容区域&lt;/p&gt;
  &lt;/section&gt;
  
  &lt;section class=""parallax-section bg-parallax"" 
           style=""background-image: url('ocean.jpg');""&gt;
    &lt;div class=""content""&gt;
      &lt;h2&gt;第二个视差区域&lt;/h2&gt;
      &lt;p&gt;不同的背景图片，相同的视差效果&lt;/p&gt;
    &lt;/div&gt;
  &lt;/section&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>"
CSS视差滚动：JavaScript增强视差效果	"<pre><code class=""language-javascript"">// JavaScript 增强视差滚动效果

class ParallaxController {
  constructor() {
    this.elements = [];
    this.init();
  }
  
  init() {
    this.registerElement('.parallax-slow', 0.5);
    this.registerElement('.parallax-normal', 1.0);
    this.registerElement('.parallax-fast', 1.5);
    this.bindScrollEvent();
  }
  
  registerElement(selector, speed) {
    const elements = document.querySelectorAll(selector);
    elements.forEach(element => {
      this.elements.push({
        element: element,
        speed: speed,
        offset: element.offsetTop
      });
    });
  }
  
  bindScrollEvent() {
    let ticking = false;
    
    window.addEventListener('scroll', () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          this.updateParallax();
          ticking = false;
        });
        ticking = true;
      }
    });
  }
  
  updateParallax() {
    const scrollY = window.pageYOffset;
    
    this.elements.forEach(item => {
      const { element, speed, offset } = item;
      const yPos = -(scrollY - offset) * speed;
      element.style.transform = `translateY(${yPos}px)`;
    });
  }
}

const parallax = new ParallaxController();</code></pre>"
CSS视差滚动：性能优化和注意事项	"<pre><code class=""language-javascript"">// 视差滚动性能优化和注意事项

const parallaxOptimization = {
  performance: {
    useRAF: function() {
      let ticking = false;
      
      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.updateParallax();
            ticking = false;
          });
          ticking = true;
        }
      });
    },
    
    throttle: function(func, delay) {
      let timeoutId;
      let lastExecTime = 0;
      
      return function(...args) {
        const currentTime = Date.now();
        
        if (currentTime - lastExecTime > delay) {
          func.apply(this, args);
          lastExecTime = currentTime;
        } else {
          clearTimeout(timeoutId);
          timeoutId = setTimeout(() => {
            func.apply(this, args);
            lastExecTime = Date.now();
          }, delay - (currentTime - lastExecTime));
        }
      };
    },
    
    useTransform: function(element, yPos) {
      element.style.transform = `translateY(${yPos}px)`;
    }
  },
  
  compatibility: {
    isMobile: function() {
      return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    },
    
    disableOnMobile: function() {
      if (this.isMobile()) {
        document.querySelectorAll('.parallax-bg').forEach(el => {
          el.style.backgroundAttachment = 'scroll';
        });
        console.log('移动端已禁用视差效果');
        return true;
      }
      return false;
    }
  }
};</code></pre>"
CSS视差滚动：视差滚动的应用场景和最佳实践	"<pre><code class=""language-javascript"">// 视差滚动应用场景和最佳实践

const parallaxBestPractices = {
  useCases: {
    brandShowcase: {
      description: '企业官网首页，产品发布页',
      implementation: {
        hero: '大背景图 + 品牌标语',
        products: '产品图片分层展示',
        story: '品牌故事叙述'
      }
    },
    
    portfolio: {
      description: '设计师、摄影师作品展示',
      implementation: {
        gallery: '作品图片视差展示',
        details: '项目详情分层显示',
        navigation: '平滑的页面切换'
      }
    },
    
    storytelling: {
      description: '交互式故事、时间线展示',
      implementation: {
        timeline: '时间轴视差滚动',
        chapters: '章节分层展示',
        immersive: '沉浸式阅读体验'
      }
    }
  },
  
  designPrinciples: {
    moderation: {
      rule: '不要过度使用视差效果',
      reason: '避免用户眩晕和分散注意力',
      suggestion: '重点区域使用，普通内容正常滚动'
    },
    
    performance: {
      rule: '优先考虑页面性能',
      techniques: [
        '使用 CSS transform 而非 position',
        '合理使用 requestAnimationFrame',
        '移动端考虑禁用或简化效果'
      ]
    },
    
    contentFirst: {
      rule: '视差效果服务于内容',
      principle: '增强内容表达，而非喧宾夺主',
      implementation: '确保内容可读性和可访问性'
    }
  },
  
  implementationTips: {
    layering: function() {
      const layers = {
        background: { speed: 0.2, zIndex: 1 },
        midground: { speed: 0.6, zIndex: 2 },
        foreground: { speed: 1.0, zIndex: 3 },
        ui: { speed: 1.2, zIndex: 4 }
      };
      return layers;
    },
    
    easingFunctions: {
      easeInOut: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,
      easeOut: t => 1 - Math.pow(1 - t, 3),
      easeIn: t => t * t * t
    }
  }
};</code></pre>"