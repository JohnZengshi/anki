#separator:tab
#html:true
请用CSS实现一个div元素在屏幕中垂直水平居中（使用绝对定位+transform方法）	"<pre><code class=""language-css"">.centered-div {
  /* 设置固定尺寸 */
  width: 200px;
  height: 100px;
  background-color: #f0f0f0;
  
  /* 绝对定位脱离文档流 */
  position: absolute;
  
  /* 将元素左上角定位到屏幕中心 */
  top: 50%;
  left: 50%;
  
  /* 关键：向左上偏移自身宽高的50%，使元素几何中心居中 */
  transform: translate(-50%, -50%);
  
  /* 文字居中 */
  text-align: center;
  line-height: 100px; /* 单行文字垂直居中 */
}</code></pre>"
请用HTML+CSS实现完整的垂直水平居中页面结构	"<pre><code class=""language-html"">&lt;!DOCTYPE html&gt;
&lt;html lang=""zh-CN""&gt;
&lt;head&gt;
  &lt;meta charset=""UTF-8""&gt;
  &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1.0""&gt;
  &lt;title&gt;垂直水平居中示例&lt;/title&gt;
  &lt;style&gt;
    /* 重置默认样式 */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    /* 确保html和body占满全屏 */
    html, body {
      height: 100%;
    }
    
    /* 居中的div样式 */
    .centered-div {
      width: 300px;
      height: 200px;
      background-color: #4CAF50;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      
      /* 绝对定位居中 */
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      
      /* 内容居中 */
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 18px;
      font-weight: bold;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class=""centered-div""&gt;
    我在屏幕正中央！
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>"
请用JavaScript动态创建一个垂直水平居中的div元素	"<pre><code class=""language-javascript"">// 动态创建垂直水平居中的div元素
function createCenteredDiv(content, width = 200, height = 100) {
  // 创建div元素
  const div = document.createElement('div');
  
  // 设置内容
  div.textContent = content || '居中内容';
  
  // 设置样式
  div.style.cssText = `
    width: ${width}px;
    height: ${height}px;
    background-color: #2196F3;
    color: white;
    border-radius: 8px;
    
    /* 绝对定位居中 */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    
    /* 文字居中 */
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: Arial, sans-serif;
    font-size: 16px;
    
    /* 添加阴影效果 */
    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    cursor: pointer;
    transition: transform 0.3s ease;
  `;
  
  // 添加悬停效果
  div.addEventListener('mouseenter', () => {
    div.style.transform = 'translate(-50%, -50%) scale(1.05)';
  });
  
  div.addEventListener('mouseleave', () => {
    div.style.transform = 'translate(-50%, -50%) scale(1)';
  });
  
  // 添加到页面
  document.body.appendChild(div);
  
  return div;
}

// 使用示例
// createCenteredDiv('Hello World!', 250, 120);</code></pre>"
请解释CSS中transform: translate(-50%, -50%)的工作原理	"<pre><code class=""language-javascript"">// transform: translate(-50%, -50%) 工作原理演示

// 1. 首先理解坐标系统
const coordinateSystem = {
  // 浏览器坐标系：左上角为原点(0,0)
  origin: { x: 0, y: 0 },
  // 屏幕中心点坐标
  screenCenter: { 
    x: window.innerWidth / 2, 
    y: window.innerHeight / 2 
  }
};

// 2. 演示定位过程
function demonstratePositioning() {
  console.log('=== CSS居中定位过程演示 ===');
  
  // 假设元素尺寸
  const elementSize = { width: 200, height: 100 };
  const screenSize = { width: 1200, height: 800 };
  
  // 步骤1: top: 50%, left: 50% 的效果
  const step1Position = {
    x: screenSize.width * 0.5,  // 50% of screen width
    y: screenSize.height * 0.5  // 50% of screen height
  };
  console.log('步骤1 - top:50%, left:50%后，元素左上角位置:', step1Position);
  console.log('此时元素中心位置:', {
    x: step1Position.x + elementSize.width / 2,
    y: step1Position.y + elementSize.height / 2
  });
  
  // 步骤2: transform: translate(-50%, -50%) 的效果
  const translateOffset = {
    x: elementSize.width * -0.5,   // -50% of element width
    y: elementSize.height * -0.5   // -50% of element height
  };
  console.log('步骤2 - translate偏移量:', translateOffset);
  
  // 最终位置
  const finalPosition = {
    x: step1Position.x + translateOffset.x,
    y: step1Position.y + translateOffset.y
  };
  console.log('最终元素左上角位置:', finalPosition);
  console.log('最终元素中心位置:', {
    x: finalPosition.x + elementSize.width / 2,
    y: finalPosition.y + elementSize.height / 2
  });
  console.log('屏幕中心位置:', {
    x: screenSize.width / 2,
    y: screenSize.height / 2
  });
}

// 3. 为什么需要translate的原因
function whyNeedTranslate() {
  console.log('\n=== 为什么需要translate? ===');
  console.log('1. top:50%, left:50% 只是把元素的左上角放在屏幕中心');
  console.log('2. 但我们希望元素的几何中心在屏幕中心');
  console.log('3. translate(-50%, -50%) 将元素向左上方移动自身尺寸的50%');
  console.log('4. 这样元素的几何中心就正好位于屏幕中心了');
}

// 执行演示
demonstratePo sitioning();
whyNeedTranslate();</code></pre>"
请比较CSS居中的几种不同方法的优缺点	"<pre><code class=""language-javascript"">// CSS居中方法对比分析
const centeringMethods = {
  // 方法1: 绝对定位 + transform
  absoluteTransform: {
    name: '绝对定位 + transform',
    code: `
      .center {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
    `,
    pros: [
      '不需要知道元素具体尺寸',
      '支持响应式设计',
      '兼容性好(IE9+)',
      '适用于固定和动态尺寸元素'
    ],
    cons: [
      '元素脱离文档流',
      '可能影响其他元素布局',
      'transform可能影响子元素渲染'
    ],
    useCase: '适用于模态框、弹窗等覆盖层元素'
  },
  
  // 方法2: Flexbox
  flexbox: {
    name: 'Flexbox布局',
    code: `
      .container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
      }
    `,
    pros: [
      '语义清晰，易于理解',
      '不脱离文档流',
      '支持多个子元素居中',
      '响应式友好'
    ],
    cons: [
      'IE10+才完全支持',
      '需要父容器配合',
      '可能影响其他flex属性'
    ],
    useCase: '适用于现代Web应用的布局'
  },
  
  // 方法3: CSS Grid
  grid: {
    name: 'CSS Grid布局',
    code: `
      .container {
        display: grid;
        place-items: center;
        height: 100vh;
      }
    `,
    pros: [
      '代码最简洁',
      '功能最强大',
      '支持复杂布局',
      '二维布局控制'
    ],
    cons: [
      'IE不支持',
      '学习成本较高',
      '简单居中可能过度设计'
    ],
    useCase: '适用于复杂的现代Web布局'
  },
  
  // 方法4: 绝对定位 + margin
  absoluteMargin: {
    name: '绝对定位 + 负margin',
    code: `
      .center {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 200px;
        height: 100px;
        margin-left: -100px; /* 宽度的一半 */
        margin-top: -50px;   /* 高度的一半 */
      }
    `,
    pros: [
      '兼容性极好(IE6+)',
      '性能较好',
      '不依赖transform'
    ],
    cons: [
      '必须知道元素确切尺寸',
      '不支持响应式',
      '维护困难'
    ],
    useCase: '适用于需要兼容老旧浏览器的项目'
  }
};

// 选择建议函数
function getRecommendation(requirements) {
  console.log('=== CSS居中方法选择建议 ===');
  
  if (requirements.includes('IE8兼容')) {
    console.log('推荐: 绝对定位 + 负margin');
    return centeringMethods.absoluteMargin;
  }
  
  if (requirements.includes('现代浏览器') && requirements.includes('复杂布局')) {
    console.log('推荐: CSS Grid');
    return centeringMethods.grid;
  }
  
  if (requirements.includes('响应式') && requirements.includes('多元素')) {
    console.log('推荐: Flexbox');
    return centeringMethods.flexbox;
  }
  
  console.log('推荐: 绝对定位 + transform (通用性最好)');
  return centeringMethods.absoluteTransform;
}

// 使用示例
// getRecommendation(['响应式', '现代浏览器']);</code></pre>"