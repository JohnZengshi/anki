#separator:tab
#html:true
CSS transition和animation的区别	"transition: 用于状态变化时的平滑过渡，需要触发事件（如hover、focus）；animation: 用于创建复杂的关键帧动画，可以自动播放和循环。主要区别：1. 触发方式：transition需要状态改变触发，animation可以自动执行；2. 复杂度：transition适合简单过渡，animation适合复杂动画序列；3. 控制能力：animation提供更精细的控制（关键帧、循环次数等）"
CSS transition实现按钮悬停效果	"<pre><code class=""language-css"">.button {
  background-color: #3498db;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  /* 定义过渡效果 */
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.button:hover {
  background-color: #2980b9; /* 悬停时的背景色 */
  transform: translateY(-2px); /* 悬停时向上移动 */
}

.button:active {
  transform: translateY(0); /* 点击时回到原位 */
}</code></pre>"
CSS animation实现无限旋转动画	"<pre><code class=""language-css"">/* 定义关键帧 */
@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* 应用动画 */
.spinner {
  width: 50px;
  height: 50px;
  border: 4px solid #f3f3f3;
  border-top: 4px solid #3498db;
  border-radius: 50%;
  /* 无限循环旋转动画 */
  animation: rotate 1s linear infinite;
}</code></pre>"
JavaScript动态控制transition和animation	"<pre><code class=""language-javascript"">// 控制transition效果
function toggleTransition(element) {
  // 切换类名触发transition
  element.classList.toggle('active');
}

// 控制animation效果
function startAnimation(element, animationName) {
  // 添加动画
  element.style.animation = `${animationName} 2s ease-in-out`;
  
  // 监听动画结束
  element.addEventListener('animationend', () => {
    console.log('动画完成');
    element.style.animation = ''; // 清除动画
  }, { once: true });
}

// 暂停和恢复动画
function pauseAnimation(element) {
  element.style.animationPlayState = 'paused';
}

function resumeAnimation(element) {
  element.style.animationPlayState = 'running';
}</code></pre>"
CSS实现卡片翻转效果（transition vs animation对比）	"<pre><code class=""language-css"">/* 使用transition实现翻转（需要hover触发） */
.card-transition {
  width: 200px;
  height: 200px;
  perspective: 1000px;
}

.card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  transition: transform 0.6s; /* transition方式 */
  transform-style: preserve-3d;
}

.card-transition:hover .card-inner {
  transform: rotateY(180deg); /* hover触发翻转 */
}

/* 使用animation实现自动翻转 */
@keyframes autoFlip {
  0%, 50% { transform: rotateY(0deg); }
  51%, 100% { transform: rotateY(180deg); }
}

.card-animation .card-inner {
  animation: autoFlip 3s infinite; /* 自动循环翻转 */
}</code></pre>"