#separator:tab
#html:true
实现HTML5语义化布局结构	"<pre><code class=""language-html"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;header&gt;网站头部&lt;/header&gt;
  &lt;nav&gt;导航菜单&lt;/nav&gt;
  &lt;main&gt;
    &lt;section&gt;主要内容区域&lt;/section&gt;
    &lt;aside&gt;侧边栏&lt;/aside&gt;
  &lt;/main&gt;
  &lt;footer&gt;网站底部&lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>"
HTML5音视频播放器实现	"<pre><code class=""language-html"">&lt;!-- 音频播放器 --&gt;
&lt;audio controls&gt;
  &lt;source src=""music.mp3"" type=""audio/mpeg""&gt;
  您的浏览器不支持音频播放
&lt;/audio&gt;

&lt;!-- 视频播放器 --&gt;
&lt;video width=""320"" height=""240"" controls&gt;
  &lt;source src=""movie.mp4"" type=""video/mp4""&gt;
  您的浏览器不支持视频播放
&lt;/video&gt;</code></pre>"
Canvas绘制基本图形	"<pre><code class=""language-javascript"">// 获取Canvas元素和上下文
const canvas = document.getElementById('myCanvas');
const ctx = canvas.getContext('2d');

// 绘制矩形
ctx.fillStyle = 'blue';
ctx.fillRect(10, 10, 100, 50);

// 绘制圆形
ctx.beginPath();
ctx.arc(150, 50, 30, 0, 2 * Math.PI);
ctx.fillStyle = 'red';
ctx.fill();

// 绘制线条
ctx.beginPath();
ctx.moveTo(200, 20);
ctx.lineTo(250, 80);
ctx.stroke();</code></pre>"
HTML5本地存储实现	"<pre><code class=""language-javascript"">// localStorage存储
function saveData(key, value) {
  localStorage.setItem(key, JSON.stringify(value));
}

// localStorage读取
function getData(key) {
  const data = localStorage.getItem(key);
  return data ? JSON.parse(data) : null;
}

// sessionStorage使用
sessionStorage.setItem('tempData', 'session值');
const tempData = sessionStorage.getItem('tempData');

// 清除存储
localStorage.removeItem('key');
localStorage.clear(); // 清除所有</code></pre>"
HTML5新表单元素使用	"<pre><code class=""language-html"">&lt;form&gt;
  &lt;!-- 日期选择 --&gt;
  &lt;input type=""date"" name=""birthday""&gt;
  
  &lt;!-- 邮箱验证 --&gt;
  &lt;input type=""email"" name=""email"" required&gt;
  
  &lt;!-- 数字范围 --&gt;
  &lt;input type=""range"" min=""0"" max=""100"" value=""50""&gt;
  
  &lt;!-- 颜色选择 --&gt;
  &lt;input type=""color"" name=""favcolor""&gt;
  
  &lt;!-- 搜索框 --&gt;
  &lt;input type=""search"" name=""search""&gt;
&lt;/form&gt;</code></pre>"
Web Workers后台处理	"<pre><code class=""language-javascript"">// 主线程代码
const worker = new Worker('worker.js');

// 发送数据给Worker
worker.postMessage({cmd: 'start', data: [1,2,3,4,5]});

// 接收Worker返回的数据
worker.onmessage = function(e) {
  console.log('Worker返回:', e.data);
};

// worker.js文件内容
self.onmessage = function(e) {
  const data = e.data;
  // 执行耗时计算
  const result = data.data.reduce((a, b) => a + b, 0);
  // 返回结果
  self.postMessage(result);
};</code></pre>"
WebSocket实时通信	"<pre><code class=""language-javascript"">// 创建WebSocket连接
const socket = new WebSocket('ws://localhost:8080');

// 连接打开时
socket.onopen = function(event) {
  console.log('WebSocket连接已建立');
  socket.send('Hello Server!');
};

// 接收消息
socket.onmessage = function(event) {
  console.log('收到消息:', event.data);
};

// 连接关闭时
socket.onclose = function(event) {
  console.log('WebSocket连接已关闭');
};

// 发送消息
function sendMessage(msg) {
  socket.send(msg);
}</code></pre>"
HTML5地理位置获取	"<pre><code class=""language-javascript"">// 检查浏览器是否支持地理位置
if (navigator.geolocation) {
  // 获取当前位置
  navigator.geolocation.getCurrentPosition(
    function(position) {
      const lat = position.coords.latitude;
      const lng = position.coords.longitude;
      console.log(`纬度: ${lat}, 经度: ${lng}`);
    },
    function(error) {
      console.log('获取位置失败:', error.message);
    }
  );
} else {
  console.log('浏览器不支持地理位置');
}</code></pre>"
SVG矢量图形绘制	"<pre><code class=""language-html"">&lt;svg width=""200"" height=""200""&gt;
  &lt;!-- 圆形 --&gt;
  &lt;circle cx=""50"" cy=""50"" r=""30"" fill=""blue"" /&gt;
  
  &lt;!-- 矩形 --&gt;
  &lt;rect x=""100"" y=""20"" width=""60"" height=""40"" fill=""red"" /&gt;
  
  &lt;!-- 路径 --&gt;
  &lt;path d=""M 10 100 L 50 150 L 90 100 Z"" fill=""green"" /&gt;
  
  &lt;!-- 文本 --&gt;
  &lt;text x=""120"" y=""120"" font-family=""Arial"" font-size=""14""&gt;SVG文本&lt;/text&gt;
&lt;/svg&gt;</code></pre>"
HTML5拖放功能实现	"<pre><code class=""language-javascript"">// 设置元素可拖拽
function makeDraggable(element) {
  element.draggable = true;
  
  element.ondragstart = function(e) {
    e.dataTransfer.setData('text/plain', e.target.id);
  };
}

// 设置放置区域
function makeDroppable(element) {
  element.ondragover = function(e) {
    e.preventDefault(); // 允许放置
  };
  
  element.ondrop = function(e) {
    e.preventDefault();
    const data = e.dataTransfer.getData('text/plain');
    const draggedElement = document.getElementById(data);
    e.target.appendChild(draggedElement);
  };
}</code></pre>"