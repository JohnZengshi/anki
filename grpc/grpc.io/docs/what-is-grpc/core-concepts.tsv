#separator:tab
#html:true
定义gRPC四种服务方法	"<pre><code class=""language-protobuf"">service ExampleService {
  // 1. Unary RPC (一元调用)
  rpc UnaryCall(ExampleRequest) returns (ExampleResponse);
  
  // 2. Server Streaming RPC (服务端流)
  rpc ServerStream(ExampleRequest) returns (stream ExampleResponse);
  
  // 3. Client Streaming RPC (客户端流)
  rpc ClientStream(stream ExampleRequest) returns (ExampleResponse);
  
  // 4. Bidirectional Streaming RPC (双向流)
  rpc BidiStream(stream ExampleRequest) returns (stream ExampleResponse);
}

message ExampleRequest {
  string data = 1;
}

message ExampleResponse {
  string result = 1;
}</code></pre>"
Golang实现Unary RPC服务端	"<pre><code class=""language-go"">type server struct {
	pb.UnimplementedExampleServiceServer
}

func (s *server) UnaryCall(ctx context.Context, req *pb.ExampleRequest) (*pb.ExampleResponse, error) {
	// 处理请求并返回单个响应
	return &pb.ExampleResponse{
		Result: ""处理结果: "" + req.GetData(),
	}, nil
}

func main() {
	lis, _ := net.Listen(""tcp"", "":50051"")
	grpcServer := grpc.NewServer()
	pb.RegisterExampleServiceServer(grpcServer, &server{})
	grpcServer.Serve(lis)
}</code></pre>"
Golang实现Server Streaming	"<pre><code class=""language-go"">func (s *server) ServerStream(req *pb.ExampleRequest, stream pb.ExampleService_ServerStreamServer) error {
	// 发送多个响应组成的流
	for i := 0; i < 5; i++ {
		resp := &pb.ExampleResponse{
			Result: fmt.Sprintf(""响应%d: %s"", i+1, req.GetData()),
		}
		if err := stream.Send(resp); err != nil {
			return err
		}
		time.Sleep(500 * time.Millisecond) // 模拟处理延迟
	}
	return nil
}</code></pre>"
Golang实现Client Streaming	"<pre><code class=""language-go"">func (s *server) ClientStream(stream pb.ExampleService_ClientStreamServer) error {
	var combinedData strings.Builder
	
	// 接收客户端发送的流数据
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			// 客户端结束发送，返回最终响应
			return stream.SendAndClose(&pb.ExampleResponse{
				Result: ""合并结果: "" + combinedData.String(),
			})
		}
		if err != nil {
			return err
		}
		combinedData.WriteString(req.GetData() + "", "")
	}
}</code></pre>"
Golang实现Bidirectional Streaming	"<pre><code class=""language-go"">func (s *server) BidiStream(stream pb.ExampleService_BidiStreamServer) error {
	// 同时处理输入流和输出流
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			return nil
		}
		if err != nil {
			return err
		}
		
		// 处理并返回响应
		resp := &pb.ExampleResponse{Result: ""处理: "" + req.GetData()}
		if err := stream.Send(resp); err != nil {
			return err
		}
	}
}</code></pre>"
gRPC元数据传递(Golang)	"<pre><code class=""language-go"">// 客户端发送元数据
md := metadata.Pairs(""authorization"", ""Bearer token123"", ""client-id"", ""app-001"")
ctx := metadata.NewOutgoingContext(context.Background(), md)

// 服务端接收元数据
func (s *server) SomeMethod(ctx context.Context, req *pb.Request) (*pb.Response, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if ok {
		tokens := md.Get(""authorization"")
		if len(tokens) > 0 {
			log.Printf(""收到令牌: %s"", tokens[0])
		}
	}
	// ...处理逻辑
}</code></pre>"
gRPC截止时间设置(Golang)	"<pre><code class=""language-go"">// 客户端设置截止时间
ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
defer cancel()

response, err := client.SomeMethod(ctx, &pb.Request{})

// 服务端检查截止时间
func (s *server) SomeMethod(ctx context.Context, req *pb.Request) (*pb.Response, error) {
	// 检查上下文是否已超时
	if ctx.Err() == context.DeadlineExceeded {
		return nil, status.Error(codes.DeadlineExceeded, ""请求超时"")
	}
	// ...正常处理
}</code></pre>"
gRPC错误处理规范	"<pre><code class=""language-go"">// 服务端返回错误
if invalidCondition {
	return nil, status.Errorf(codes.InvalidArgument, ""参数无效: %v"", badValue)
}

// 客户端处理错误
res, err := client.Method(ctx, req)
if err != nil {
	st, ok := status.FromError(err)
	if ok {
		switch st.Code() {
		case codes.DeadlineExceeded:
			log.Println(""操作超时"")
		case codes.PermissionDenied:
			log.Println(""权限不足"")
		default:
			log.Printf(""RPC失败: %s"", st.Message())
		}
	}
}</code></pre>"
gRPC与HTTP/2特性对比	"<pre><code class=""language-markdown"">| 特性                | gRPC/HTTP/2                     | 传统HTTP/1.1               |
|---------------------|---------------------------------|----------------------------|
| **数据传输**        | 二进制帧 (高效)                 | 文本 (冗余)               |
| **多路复用**        | 支持 (单连接并行流)             | 不支持 (队头阻塞)         |
| **头部压缩**        | HPACK压缩 (减少开销)            | 无压缩                     |
| **流控制**          | 精细化的流控机制                | 简单的全局控制            |
| **服务器推送**      | 支持 (主动推送资源)             | 需要额外配置              |</code></pre>"